#!/usr/bin/env ruby

def objc_quote(val)
	val.gsub("\n", "\\n").gsub("\r", " ").gsub('"', '\\"')
end

path = ARGV[0]
puts "Processing: #{path}"
path_ary = path.split(/\//)
fname = path_ary.pop
fname_parts = fname.split(".")
fname_type = fname_parts.pop
cname = path_ary[1]
if cname.nil?
	cname = fname_parts[0]
end
if(fname_type == "nmv")
	fname_action = fname_parts[0]
	fname_format = fname_parts[1]
	clsname = "NewmView_#{path_ary.join("_")}_#{fname_action}_#{fname_format}"
	clsfname = "#{clsname}.m"

	f = File.open(path)
	data = "%>" + f.read + "<%"
	f.close

	data = data.gsub(/(?<=\%\>)(.*?)(?=\<\%)/m) {
		html_data = objc_quote($1)
		cmd = <<EOF
[buffer appendString:@"#{html_data}"];
EOF
		cmd
	}

	data = data.gsub(/<%#(.*?)%>/m, "")

	data = data.gsub(/<%=(.*?)%>/m) {
		val = $1
		cmd = <<EOF
[buffer appendString: #{val}];
EOF
		cmd
	}

	data = data.gsub(/<%(.*?)%>/m) {
		cmd = $1
		cmd
	}

	data = data[2..-3]


	File.open(clsfname, "w") do |f|
		f.write(<<EOF)
// NOTE - this file was autogenerated from #{path}
#import <Foundation/Foundation.h>
#import "Newm.h"
#import "#{cname}.h"

@interface #{clsname} : NMAbstractView {
}
@end

@implementation #{clsname}
-(NSData *)render:(NMAbstractController *)ctrl {
	NSMutableString *buffer = [NSMutableString stringWithCapacity:50000];
	#{cname} *controller = (#{cname} *)ctrl;

	#{data}

	return [buffer dataUsingEncoding:NSUTF8StringEncoding];
}
@end

EOF
	end
else
	raise "Error processing file: #{path}"
end

